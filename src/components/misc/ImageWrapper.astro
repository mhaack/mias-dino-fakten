---
import path from 'node:path'
interface Props {
  id?: string
  src: string
  class?: string
  imageClass?: string
  alt?: string
  position?: string
  basePath?: string
  loading?: string
}
import { Image } from 'astro:assets'
import { url } from '../../utils/url-utils'

const {
  id,
  src,
  alt,
  position = 'center',
  basePath = '/',
  loading = 'lazy',
} = Astro.props
const className = Astro.props.class
const imageClassName = Astro.props.imageClass || 'object-cover'

const isLocal = !(
  src.startsWith('/') ||
  src.startsWith('http') ||
  src.startsWith('https') ||
  src.startsWith('data:')
)
const isPublic = src.startsWith('/')

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
// biome-ignore lint/suspicious/noImplicitAnyLet: <explanation>
let img
if (isLocal) {
  const files = import.meta.glob<ImageMetadata>(
    '../../**/*.{jpeg,jpg,png,gif}',
    {
      import: 'default',
    },
  )
  const normalizedPath = path
    .normalize(path.join('../../', basePath, src))
    .replace(/\\/g, '/')

  if (!files[normalizedPath])
    throw new Error(
      `"${src}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`,
    )
  const file = files[normalizedPath]
  img = await file()
}

const imageClass = `w-full h-full ${imageClassName}`
const imageStyle = position !== 'none' ? `object-position: ${position}` : ''
---
<div id={id} class:list={[className, 'overflow-hidden relative']}>
    {isLocal && img && <Image src={img} alt={alt || ""} widths={[240, 540, 720, img.width]} sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, ${img.width}px`} class={imageClass} style={imageStyle} loading={loading}/>}
    {!isLocal && <img src={isPublic ? url(src) : src} alt={alt || ""} class={imageClass} style={imageStyle}/>}
</div>

